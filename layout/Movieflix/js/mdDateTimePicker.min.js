!function (t, e) {
    if ("function" == typeof define && define.amd) define(["exports"], e); else if ("undefined" != typeof exports) e(exports); else {
        var i = {exports: {}};
        e(i.exports), t.mdDateTimePicker = i.exports
    }
}(this, function (t) {
    "use strict";
    function e(t, e) {
        if (!(t instanceof e))throw new TypeError("Cannot call a class as a function")
    }

    Object.defineProperty(t, "__esModule", {value: !0});
    var i = function () {
        function t(t, e) {
            for (var i = 0; i < e.length; i++) {
                var s = e[i];
                s.enumerable = s.enumerable || !1, s.configurable = !0, "value" in s && (s.writable = !0), Object.defineProperty(t, s.key, s)
            }
        }

        return function (e, i, s) {
            return i && t(e.prototype, i), s && t(e, s), e
        }
    }(), s = {view: !0, state: !1}, a = function () {
        function t(i) {
            var s = i.type, a = i.init, d = void 0 === a ? moment() : a, l = i.past,
                o = void 0 === l ? moment().subtract(21, "years") : l, n = i.future, c = void 0 === n ? d : n,
                r = i.mode, _ = void 0 !== r && r, m = i.orientation, h = void 0 === m ? "LANDSCAPE" : m, p = i.trigger,
                u = void 0 === p ? "" : p, g = i.ok, v = void 0 === g ? "ok" : g, D = i.cancel,
                f = void 0 === D ? "cancel" : D, k = i.colon, C = void 0 === k || k;
            e(this, t), this._type = s, this._init = d, this._past = o, this._future = c, this._mode = _, this._orientation = h, this._trigger = u, this._ok = v, this._cancel = f, this._colon = C, this._sDialog = {}, document.getElementById("mddtp-picker__" + this._type) || this._buildDialog()
        }

        return i(t, [{
            key: "toggle", value: function () {
                this._selectDialog(), t.dialog.state ? this._hideDialog() : ("date" === this._type ? this._initDateDialog(this._init) : "time" === this._type && this._initTimeDialog(this._init), this._showDialog())
            }
        }, {
            key: "_selectDialog", value: function () {
                this._sDialog.picker = document.getElementById("mddtp-picker__" + [this._type]);
                for (var t = ["viewHolder", "years", "header", "cancel", "ok", "left", "right", "previous", "current", "next", "subtitle", "title", "titleDay", "titleMonth", "AM", "PM", "needle", "hourView", "minuteView", "hour", "minute", "fakeNeedle", "circularHolder", "circle", "dotSpan"], e = t.length; e--;)this._sDialog[t[e]] = document.getElementById("mddtp-" + this._type + "__" + t[e]);
                this._sDialog.tDate = this._init.clone(), this._sDialog.sDate = this._init.clone()
            }
        }, {
            key: "_showDialog", value: function () {
                var e = this, i = "zoomIn";
                t.dialog.state = !0, this._sDialog.picker.classList.remove("mddtp-picker--inactive"), this._sDialog.picker.classList.add(i), "PORTRAIT" === this._orientation && this._sDialog.picker.classList.add("mddtp-picker--portrait"), setTimeout(function () {
                    e._sDialog.picker.classList.remove(i)
                }, 300)
            }
        }, {
            key: "_hideDialog", value: function () {
                var e = this, i = this._sDialog.years, s = e._sDialog.title, a = e._sDialog.subtitle,
                    d = this._sDialog.viewHolder, l = this._sDialog.AM, o = this._sDialog.PM, n = this._sDialog.minute,
                    c = this._sDialog.hour, r = this._sDialog.minuteView, _ = this._sDialog.hourView,
                    m = this._sDialog.picker, h = this._sDialog.needle, p = this._sDialog.dotSpan,
                    u = "mddtp-picker__color--active", g = "mddtp-picker--inactive",
                    v = "mddtp-picker__years--invisible", D = "zoomIn", f = "zoomOut",
                    k = "mddtp-picker__circularView--hidden", C = "mddtp-picker__selection";
                t.dialog.state = !1, t.dialog.view = !0, this._sDialog.picker.classList.add(f), "date" === this._type ? (i.classList.remove(D, f), i.classList.add(v), s.classList.remove(u), a.classList.add(u), d.classList.remove(f)) : (l.classList.remove(u), o.classList.remove(u), n.classList.remove(u), c.classList.add(u), r.classList.add(k), _.classList.remove(k), a.setAttribute("style", "display: none"), p.setAttribute("style", "display: none"), h.className = C), setTimeout(function () {
                    e._sDialog.picker.classList.remove("mddtp-picker--portrait"), e._sDialog.picker.classList.remove(f), e._sDialog.picker.classList.add(g);
                    var t = m.cloneNode(!0);
                    m.parentNode.replaceChild(t, m)
                }, 300)
            }
        }, {
            key: "_buildDialog", value: function () {
                var t = this._type, e = document.createDocumentFragment(), i = document.createElement("div"),
                    s = document.createElement("div"), a = document.createElement("div"),
                    d = document.createElement("div"), l = document.createElement("button"),
                    o = document.createElement("button");
                if (i.id = "mddtp-picker__" + t, i.classList.add("mddtp-picker"), i.classList.add("mddtp-picker-" + t), i.classList.add("mddtp-picker--inactive"), i.classList.add("animated"), this._addId(s, "header"), this._addClass(s, "header"), i.appendChild(s), this._addClass(a, "body"), a.appendChild(d), i.appendChild(a), "date" === this._type) {
                    var n = document.createElement("div"), c = document.createElement("div"),
                        r = document.createElement("div"), _ = document.createElement("div"),
                        m = document.createElement("div"), h = document.createElement("ul"),
                        p = document.createElement("li"), u = document.createElement("li"),
                        g = document.createElement("li"), v = document.createElement("button"),
                        D = document.createElement("button"), f = document.createElement("ul");
                    this._addId(n, "subtitle"), this._addClass(n, "subtitle"), this._addId(c, "title"), this._addClass(c, "title", ["mddtp-picker__color--active"]), this._addId(r, "titleDay"), this._addId(_, "titleMonth"), c.appendChild(r), c.appendChild(_), s.appendChild(n), s.appendChild(c), this._addId(m, "viewHolder"), this._addClass(m, "viewHolder", ["animated"]), this._addClass(h, "views"), this._addId(p, "previous"), p.classList.add("mddtp-picker__view"), this._addId(u, "current"), u.classList.add("mddtp-picker__view"), this._addId(g, "next"), g.classList.add("mddtp-picker__view"), this._addView(p), this._addView(u), this._addView(g), m.appendChild(h), h.appendChild(p), h.appendChild(u), h.appendChild(g), this._addId(v, "left"), v.classList.add("mddtp-button"), this._addClass(v, "left"), v.setAttribute("type", "button"), this._addId(D, "right"), D.classList.add("mddtp-button"), this._addClass(D, "right"), D.setAttribute("type", "button"), this._addId(f, "years"), this._addClass(f, "years", ["mddtp-picker__years--invisible", "animated"]), a.appendChild(m), a.appendChild(v), a.appendChild(D), a.appendChild(f)
                } else {
                    var k = document.createElement("div"), C = document.createElement("span"),
                        L = document.createElement("span"), y = document.createElement("span"),
                        b = document.createElement("div"), w = document.createElement("div"),
                        E = document.createElement("div"), I = document.createElement("div"),
                        M = document.createElement("div"), x = document.createElement("span"),
                        T = document.createElement("span"), A = document.createElement("span"),
                        V = document.createElement("div"), N = document.createElement("div"),
                        B = document.createElement("div");
                    this._addId(k, "title"), this._addClass(k, "title"), this._addId(C, "hour"), C.classList.add("mddtp-picker__color--active"), L.textContent = ":", this._addId(L, "dotSpan"), L.setAttribute("style", "display: none"), this._addId(y, "minute"), this._addId(b, "subtitle"), this._addClass(b, "subtitle"), b.setAttribute("style", "display: none"), this._addId(w, "AM"), w.textContent = "AM", this._addId(E, "PM"), E.textContent = "PM", k.appendChild(C), k.appendChild(L), k.appendChild(y), b.appendChild(w), b.appendChild(E), s.appendChild(k), s.appendChild(b), this._addId(I, "circularHolder"), this._addClass(I, "circularHolder"), this._addId(M, "needle"), M.classList.add("mddtp-picker__selection"), this._addClass(x, "dot"), this._addClass(T, "line"), this._addId(A, "circle"), this._addClass(A, "circle"), this._addId(V, "minuteView"), V.classList.add("mddtp-picker__circularView"), V.classList.add("mddtp-picker__circularView--hidden"), this._addId(N, "fakeNeedle"), N.classList.add("mddtp-picker__circle--fake"), this._addId(B, "hourView"), B.classList.add("mddtp-picker__circularView"), M.appendChild(x), M.appendChild(T), M.appendChild(A), I.appendChild(M), I.appendChild(V), I.appendChild(N), I.appendChild(B), a.appendChild(I)
                }
                d.classList.add("mddtp-picker__action"), this._addId(l, "cancel"), l.classList.add("mddtp-button"), l.setAttribute("type", "button"), this._addId(o, "ok"), o.classList.add("mddtp-button"), o.setAttribute("type", "button"), d.appendChild(l), d.appendChild(o), a.appendChild(d), e.appendChild(i), document.getElementsByTagName("body").item(0).appendChild(e)
            }
        }, {
            key: "_initTimeDialog", value: function (t) {
                var e = this._sDialog.hour, i = this._sDialog.minute, s = this._sDialog.subtitle,
                    a = this._sDialog.dotSpan;
                if (this._mode) {
                    var d = parseInt(t.format("H"), 10);
                    0 === d && (d = "00"), this._fillText(e, d), this._colon && a.removeAttribute("style")
                } else this._fillText(e, t.format("h")), this._sDialog[t.format("A")].classList.add("mddtp-picker__color--active"), s.removeAttribute("style"), a.removeAttribute("style");
                this._fillText(i, t.format("mm")), this._initHour(), this._initMinute(), this._attachEventHandlers(), this._changeM(), this._dragDial(), this._switchToView(e), this._switchToView(i), this._addClockEvent(), this._setButtonText()
            }
        }, {
            key: "_initHour", value: function () {
                var t = this._sDialog.hourView, e = this._sDialog.needle, i = "mddtp-hour__selected",
                    s = "mddtp-picker__cell--selected", a = "mddtp-picker__cell--rotate-", d = "mddtp-picker__cell",
                    l = document.createDocumentFragment(), o = void 0;
                if (this._mode) {
                    o = parseInt(this._sDialog.tDate.format("H"), 10);
                    for (var n = 1, c = 5; n <= 24; n++, c += 5) {
                        var r = document.createElement("div"), _ = document.createElement("span");
                        r.classList.add(d), 24 === n ? _.textContent = "00" : _.textContent = n, r.classList.add(a + c), o === n && (r.id = i, r.classList.add(s), e.classList.add(a + c)), 24 === n && 0 === o && (r.id = i, r.classList.add(s), e.classList.add(a + c)), r.appendChild(_), l.appendChild(r)
                    }
                } else {
                    o = parseInt(this._sDialog.tDate.format("h"), 10);
                    for (var m = 1, h = 10; m <= 12; m++, h += 10) {
                        var p = document.createElement("div"), u = document.createElement("span");
                        p.classList.add(d), u.textContent = m, p.classList.add(a + h), o === m && (p.id = i, p.classList.add(s), e.classList.add(a + h)), p.appendChild(u), l.appendChild(p)
                    }
                }
                for (; t.lastChild;)t.removeChild(t.lastChild);
                t.appendChild(l)
            }
        }, {
            key: "_initMinute", value: function () {
                for (var t = this._sDialog.minuteView, e = parseInt(this._sDialog.tDate.format("m"), 10), i = "mddtp-minute__selected", s = "mddtp-picker__cell--selected", a = "mddtp-picker__cell--rotate-", d = "mddtp-picker__cell", l = document.createDocumentFragment(), o = 5, n = 10; o <= 60; o += 5, n += 10) {
                    var c = document.createElement("div"), r = document.createElement("span");
                    c.classList.add(d), 60 === o ? r.textContent = this._numWithZero(0) : r.textContent = this._numWithZero(o), 0 === e && (e = 60), c.classList.add(a + n), (e === o || e - 1 === o || e + 1 === o || 1 === e && 60 === o) && (c.id = i, c.classList.add(s)), c.appendChild(r), l.appendChild(c)
                }
                for (; t.lastChild;)t.removeChild(t.lastChild);
                t.appendChild(l)
            }
        }, {
            key: "_initDateDialog", value: function (t) {
                var e = this._sDialog.subtitle, i = this._sDialog.title, s = this._sDialog.titleDay,
                    a = this._sDialog.titleMonth;
                this._fillText(e, t.format("YYYY")), this._fillText(s, t.format("ddd, ")), this._fillText(a, t.format("MMM D")), this._initYear(), this._initViewHolder(), this._attachEventHandlers(), this._changeMonth(), this._switchToView(e), this._switchToView(i), this._setButtonText()
            }
        }, {
            key: "_initViewHolder", value: function () {
                var t = this._sDialog.tDate, e = (this._sDialog.picker, this._sDialog.current),
                    i = this._sDialog.previous, s = this._sDialog.next, a = this._past, d = this._future;
                t.isBefore(a, "month") && (t = a.clone()), t.isAfter(d, "month") && (t = d.clone()), this._sDialog.tDate = t, this._initMonth(e, t), this._initMonth(s, moment(this._getMonth(t, 1))), this._initMonth(i, moment(this._getMonth(t, -1))), this._toMoveMonth()
            }
        }, {
            key: "_initMonth", value: function (t, e) {
                var i = e.format("MMMM YYYY"), s = t.getElementsByTagName("div");
                this._fillText(s[0], i);
                var a = document.createDocumentFragment(), d = s[3],
                    l = moment.weekdays(!0).indexOf(moment.weekdays(!1, moment(e).date(1).day())), o = -1, n = -1,
                    c = parseInt(moment(e).endOf("month").format("D"), 10) + l - 1, r = l, _ = "mddtp-picker__cell",
                    m = c;
                moment().isSame(e, "month") && (o = parseInt(moment().format("D"), 10), o += l - 1), this._past.isSame(e, "month") && (r = parseInt(this._past.format("D"), 10), r += l - 1), this._future.isSame(e, "month") && (m = parseInt(this._future.format("D"), 10), m += l - 1), this._sDialog.sDate.isSame(e, "month") && (n = parseInt(moment(e).format("D"), 10), n += l - 1);
                for (var h = 0; h < 42; h++) {
                    var p = document.createElement("span"), u = h - l + 1;
                    h >= l && h <= c && (h > m || h < r ? p.classList.add(_ + "--disabled") : p.classList.add(_), this._fillText(p, u)), o === h && p.classList.add(_ + "--today"), n === h && (p.classList.add(_ + "--selected"), p.id = "mddtp-date__selected"), a.appendChild(p)
                }
                for (; d.lastChild;)d.removeChild(d.lastChild);
                d.appendChild(a), this._addCellClickEvent(d)
            }
        }, {
            key: "_initYear", value: function () {
                for (var t = this._sDialog.years, e = this._sDialog.tDate.year(), i = document.createDocumentFragment(), s = this._past.year(), a = this._future.year(), d = s; d <= a; d++) {
                    var l = document.createElement("li");
                    l.textContent = d, d === e && (l.id = "mddtp-date__currentYear", l.classList.add("mddtp-picker__li--current")), i.appendChild(l)
                }
                for (; t.lastChild;)t.removeChild(t.lastChild);
                t.appendChild(i), this._changeYear(t)
            }
        }, {
            key: "_switchToView", value: function (t) {
                var e = this;
                "date" == this._type ? t.onclick = function () {
                    e._switchToDateView(t, e)
                } : t.onclick = function () {
                    e._switchToTimeView(e)
                }
            }
        }, {
            key: "_switchToTimeView", value: function (e) {
                var i = e._sDialog.hourView, s = e._sDialog.minuteView, a = e._sDialog.hour, d = e._sDialog.minute,
                    l = "mddtp-picker__color--active", o = "mddtp-picker__circularView--hidden",
                    n = "mddtp-picker__selection", c = e._sDialog.needle, r = e._sDialog.circularHolder,
                    _ = e._sDialog.circle, m = e._sDialog.fakeNeedle, h = 60, p = void 0;
                i.classList.toggle(o), s.classList.toggle(o), a.classList.toggle(l), d.classList.toggle(l), c.className = "", c.classList.add(n), t.dialog.view ? (p = e._sDialog.sDate.format("m"), setTimeout(function () {
                    var t = r.getBoundingClientRect(), e = _.getBoundingClientRect();
                    m.setAttribute("style", "left:" + (e.left - t.left) + "px;top:" + (e.top - t.top) + "px")
                }, 300)) : e._mode ? (h = 24, p = parseInt(e._sDialog.sDate.format("H"), 10), 0 === p && (p = 24)) : (h = 12, p = e._sDialog.sDate.format("h"));
                var u = e._calcRotation(h, parseInt(p, 10));
                u && c.classList.add(u), t.dialog.view = !t.dialog.view
            }
        }, {
            key: "_switchToDateView", value: function (e, i) {
                e.setAttribute("disabled", "");
                var s = i._sDialog.viewHolder, a = i._sDialog.years, d = i._sDialog.title, l = i._sDialog.subtitle,
                    o = document.getElementById("mddtp-date__currentYear");
                t.dialog.view ? (s.classList.add("zoomOut"), a.classList.remove("mddtp-picker__years--invisible"), a.classList.add("zoomIn"), o.scrollIntoViewIfNeeded()) : (a.classList.add("zoomOut"), s.classList.remove("zoomOut"), s.classList.add("zoomIn"), setTimeout(function () {
                    a.classList.remove("zoomIn", "zoomOut"), a.classList.add("mddtp-picker__years--invisible"), s.classList.remove("zoomIn")
                }, 300)), d.classList.toggle("mddtp-picker__color--active"), l.classList.toggle("mddtp-picker__color--active"), t.dialog.view = !t.dialog.view, setTimeout(function () {
                    e.removeAttribute("disabled")
                }, 300)
            }
        }, {
            key: "_addClockEvent", value: function () {
                var t = this, e = this._sDialog.hourView, i = this._sDialog.minuteView,
                    s = "mddtp-picker__cell--selected";
                e.onclick = function (e) {
                    var i = "mddtp-hour__selected", a = document.getElementById(i), d = 0;
                    e.target && "SPAN" == e.target.nodeName && (a.id = "", a.classList.remove(s), e.target.parentNode.classList.add(s), e.target.parentNode.id = i, d = t._mode ? parseInt(e.target.textContent, 10) : "AM" === t._sDialog.sDate.format("A") ? e.target.textContent : parseInt(e.target.textContent, 10) + 12, t._sDialog.sDate.hour(d), t._sDialog.hour.textContent = e.target.textContent, t._switchToTimeView(t))
                }, i.onclick = function (e) {
                    var i = "mddtp-minute__selected", a = document.getElementById(i), d = 0;
                    e.target && "SPAN" == e.target.nodeName && (a && (a.id = "", a.classList.remove(s)), e.target.parentNode.classList.add(s), e.target.parentNode.id = i, d = e.target.textContent, t._sDialog.sDate.minute(d), t._sDialog.minute.textContent = d, t._switchToTimeView(t))
                }
            }
        }, {
            key: "_addCellClickEvent", value: function (t) {
                var e = this;
                t.onclick = function (t) {
                    if (t.target && "SPAN" == t.target.nodeName && t.target.classList.contains("mddtp-picker__cell")) {
                        var i = (e._sDialog.picker, t.target.textContent), s = e._sDialog.tDate.date(i),
                            a = "mddtp-date__selected", d = "mddtp-picker__cell--selected",
                            l = document.getElementById(a), o = e._sDialog.subtitle, n = e._sDialog.titleDay,
                            c = e._sDialog.titleMonth;
                        l && (l.classList.remove(d), l.id = ""), t.target.classList.add(d), t.target.id = a, e._sDialog.sDate = s.clone(), e._fillText(o, s.year()), e._fillText(n, s.format("ddd, ")), e._fillText(c, s.format("MMM D"))
                    }
                }
            }
        }, {
            key: "_toMoveMonth", value: function () {
                var t = this._sDialog.tDate, e = this._sDialog.left, i = this._sDialog.right, s = this._past,
                    a = this._future;
                e.removeAttribute("disabled"), i.removeAttribute("disabled"), e.classList.remove("mddtp-button--disabled"), i.classList.remove("mddtp-button--disabled"), t.isSame(s, "month") && (e.setAttribute("disabled", ""), e.classList.add("mddtp-button--disabled")), t.isSame(a, "month") && (i.setAttribute("disabled", ""), i.classList.add("mddtp-button--disabled"))
            }
        }, {
            key: "_changeMonth", value: function () {
                function t(t, a) {
                    var d = !1, o = e._sDialog.next, n = e._sDialog.current, c = e._sDialog.previous;
                    i.setAttribute("disabled", ""), s.setAttribute("disabled", ""), n.classList.add(t), c.classList.add(t), o.classList.add(t);
                    var r = a.cloneNode(!0), _ = void 0;
                    a === o ? (_ = c, n.parentNode.appendChild(r), o.id = n.id, n.id = c.id, c = n, n = o, o = r) : (d = !0, _ = o, c.id = n.id, n.id = o.id, o = n, n = c), setTimeout(function () {
                        a === c && (n.parentNode.insertBefore(r, n), c = r), e._sDialog.next = o, e._sDialog.current = n, e._sDialog.previous = c, n.classList.add(l), o.classList.add(l), c.classList.add(l), n.classList.remove(t), o.classList.remove(t), c.classList.remove(t), _.parentNode.removeChild(_)
                    }, 300), setTimeout(function () {
                        n.classList.remove(l), o.classList.remove(l), c.classList.remove(l), d ? e._sDialog.tDate = e._getMonth(e._sDialog.tDate, -1) : e._sDialog.tDate = e._getMonth(e._sDialog.tDate, 1), e._initViewHolder()
                    }, 350), setTimeout(function () {
                        i.classList.contains("mddtp-button--disabled") || i.removeAttribute("disabled"), s.classList.contains("mddtp-button--disabled") || s.removeAttribute("disabled")
                    }, 400)
                }

                var e = this, i = this._sDialog.left, s = this._sDialog.right, a = "mddtp-picker__view--left",
                    d = "mddtp-picker__view--right", l = "mddtp-picker__view--pause";
                i.onclick = function () {
                    t(d, e._sDialog.previous)
                }, s.onclick = function () {
                    t(a, e._sDialog.next)
                }
            }
        }, {
            key: "_changeYear", value: function (t) {
                var e = this;
                t.onclick = function (i) {
                    if (i.target && "LI" == i.target.nodeName) {
                        var s = document.getElementById("mddtp-date__currentYear");
                        s.id = "", s.classList.remove("mddtp-picker__li--current"), i.target.id = "mddtp-date__currentYear", i.target.classList.add("mddtp-picker__li--current"), e._switchToDateView(t, e), e._sDialog.tDate.year(parseInt(i.target.textContent, 10)), e._initViewHolder()
                    }
                }
            }
        }, {
            key: "_changeM", value: function () {
                var t = this, e = this._sDialog.AM, i = this._sDialog.PM;
                e.onclick = function (s) {
                    var a = t._sDialog.sDate.format("A");
                    "PM" === a && (t._sDialog.sDate.subtract(12, "h"), e.classList.toggle("mddtp-picker__color--active"), i.classList.toggle("mddtp-picker__color--active"))
                }, i.onclick = function (s) {
                    var a = t._sDialog.sDate.format("A");
                    "AM" === a && (t._sDialog.sDate.add(12, "h"), e.classList.toggle("mddtp-picker__color--active"), i.classList.toggle("mddtp-picker__color--active"))
                }
            }
        }, {
            key: "_dragDial", value: function () {
                var t = this, e = this._sDialog.needle, i = this._sDialog.circle, s = this._sDialog.fakeNeedle,
                    a = this._sDialog.circularHolder, d = this._sDialog.minute, l = "mddtp-picker__selection--quick",
                    o = "mddtp-picker__selection", n = "mddtp-picker__cell--selected",
                    c = "mddtp-picker__cell--rotate-", r = a.getBoundingClientRect(), _ = void 0,
                    m = new Draggabilly(s, {containment: !0});
                m.on("pointerDown", function (t) {
                    console.info("pointerDown", t), r = a.getBoundingClientRect()
                }), m.on("pointerMove", function (t) {
                    var i = t.clientX, s = t.clientY;
                    void 0 === i && (void 0 === t.pageX ? t.touches && t.touches.length > 0 ? (i = t.touches[0].clientX, s = t.touches[0].clientY) : console.error("coult not detect pageX, pageY") : (i = pageX - document.body.scrollLeft - document.documentElement.scrollLeft, s = pageY - document.body.scrollTop - document.documentElement.scrollTop)), console.info("Drag clientX", i, s, t);
                    var a = i - r.left - r.width / 2, d = s - r.top - r.height / 2, n = Math.atan2(-d, a);
                    e.className = "", n < 0 && (n += 2 * Math.PI), n *= 180 / Math.PI, n = 360 - n, n > 270 && (n -= 360), _ = parseInt(n / 6);
                    var m = Math.abs(6 * _ - n), h = Math.abs(6 * (_ + 1) - n);
                    h < m && _++, _ += 15, e.classList.add(o), e.classList.add(l), e.classList.add(c + 2 * _)
                }), m.on("pointerUp", function (a) {
                    var o = t._sDialog.minuteView.getElementsByTagName("div"), c = "mddtp-minute__selected",
                        m = document.getElementById(c), h = i.getBoundingClientRect();
                    s.setAttribute("style", "left:" + (h.left - r.left) + "px;top:" + (h.top - r.top) + "px"), e.classList.remove(l);
                    var p = _;
                    1 === p && (p = 60), p = t._nearestDivisor(p, 5), 60 === _ && (_ = 0), m && (m.id = "", m.classList.remove(n)), p > 0 && (p /= 5, p--, o[p].id = c, o[p].classList.add(n)), d.textContent = t._numWithZero(_), t._sDialog.sDate.minutes(_)
                })
            }
        }, {
            key: "_attachEventHandlers", value: function () {
                var t = this, e = this._sDialog.ok, i = this._sDialog.cancel, s = new CustomEvent("onCancel"),
                    a = new CustomEvent("onOk");
                i.onclick = function () {
                    t.toggle(), t._trigger && t._trigger.dispatchEvent(s)
                }, e.onclick = function () {
                    t._init = t._sDialog.sDate, t.toggle(), t._trigger && t._trigger.dispatchEvent(a)
                }
            }
        }, {
            key: "_setButtonText", value: function () {
                this._sDialog.cancel.textContent = this._cancel, this._sDialog.ok.textContent = this._ok
            }
        }, {
            key: "_getMonth", value: function (t, e) {
                var i = void 0;
                return i = t.clone(), e > 0 ? i.add(Math.abs(e), "M") : i.subtract(Math.abs(e), "M")
            }
        }, {
            key: "_nearestDivisor", value: function (t, e) {
                return t % e === 0 ? t : (t - 1) % e === 0 ? t - 1 : (t + 1) % e === 0 ? t + 1 : -1
            }
        }, {
            key: "_numWithZero", value: function (t) {
                return t > 9 ? "" + t : "0" + t
            }
        }, {
            key: "_fillText", value: function (t, e) {
                t.firstChild ? t.firstChild.nodeValue = e : t.appendChild(document.createTextNode(e))
            }
        }, {
            key: "_addId", value: function (t, e) {
                t.id = "mddtp-" + this._type + "__" + e
            }
        }, {
            key: "_addClass", value: function (t, e, i) {
                t.classList.add("mddtp-picker__" + e);
                var s = 0;
                for (i && (s = i.length, i.reverse()); s--;)t.classList.add(i[s])
            }
        }, {
            key: "_addView", value: function (t) {
                for (var e = document.createElement("div"), i = document.createElement("div"), s = document.createElement("div"), a = document.createElement("div"), d = moment.weekdaysMin(!0).reverse(), l = 7; l--;) {
                    var o = document.createElement("span");
                    o.textContent = d[l], s.appendChild(o)
                }
                this._addClass(e, "month"), this._addClass(i, "grid"), this._addClass(s, "th"), this._addClass(a, "tr"), t.appendChild(e), t.appendChild(i), i.appendChild(s), i.appendChild(a)
            }
        }, {
            key: "_calcRotation", value: function (t, e) {
                return e *= 12 === t ? 10 : 24 === t ? 5 : 2, 60 === t && 0 === e && (e = 120), "mddtp-picker__cell--rotate-" + e
            }
        }, {
            key: "time", get: function () {
                return this._init
            }, set: function (t) {
                t && (this._init = t)
            }
        }, {
            key: "trigger", get: function () {
                return this._trigger
            }, set: function (t) {
                t && (this._trigger = t)
            }
        }], [{
            key: "dialog", get: function () {
                return s
            }, set: function (e) {
                t.dialog = e
            }
        }]), t
    }();
    t["default"] = a
});